# Databricks notebook source
# MAGIC %md
# MAGIC ## Evaluate a Hugging Face LLM with `mlflow.evaluate()`
# MAGIC
# MAGIC This guide will show how to load a pre-trained Hugging Face pipeline, log it to MLflow, and use `mlflow.evaluate()` to evaluate builtin metrics as well as custom LLM-judged metrics for the model.
# MAGIC
# MAGIC For detailed information, please read the documentation on [using MLflow evaluate](https://mlflow.org/docs/latest/llms/llm-evaluate/index.html).

# COMMAND ----------

# MAGIC %md
# MAGIC <a href="https://raw.githubusercontent.com/mlflow/mlflow/master/docs/source/llms/llm-evaluate/notebooks/huggingface-evaluation.ipynb" class="notebook-download-btn"><i class="fas fa-download"></i>Download this Notebook</a>

# COMMAND ----------

# MAGIC %md
# MAGIC ### Start MLflow Server
# MAGIC
# MAGIC You can either:
# MAGIC
# MAGIC - Start a local tracking server by running `mlflow ui` within the same directory that your notebook is in.
# MAGIC - Use a tracking server, as described in [this overview](https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html).

# COMMAND ----------

# MAGIC %md
# MAGIC ### Install necessary dependencies

# COMMAND ----------

# MAGIC %pip install -q mlflow transformers torch torchvision evaluate datasets openai tiktoken fastapi rouge_score textstat

# COMMAND ----------

# Necessary imports
import warnings

import pandas as pd
from datasets import load_dataset
from transformers import pipeline

import mlflow
from mlflow.metrics.genai import EvaluationExample, answer_correctness, make_genai_metric

# COMMAND ----------

# Disable FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Load a pretrained Hugging Face pipeline
# MAGIC
# MAGIC Here we are loading a text generation pipeline, but you can also use either a text summarization or question answering pipeline.

# COMMAND ----------

mpt_pipeline = pipeline("text-generation", model="mosaicml/mpt-7b-chat")

# COMMAND ----------

# MAGIC %md
# MAGIC ### Log the model using MLflow

# COMMAND ----------

# MAGIC %md
# MAGIC We log our pipeline as an MLflow Model, which follows a standard format that lets you save a model in different "flavors" that can be understood by different downstream tools. In this case, the model is of the transformers "flavor".

# COMMAND ----------

##mlflow.set_experiment("Evaluate Hugging Face Text Pipeline") # AMM

# Define the signature
signature = mlflow.models.infer_signature(
    model_input="What are the three primary colors?",
    model_output="The three primary colors are red, yellow, and blue.",
)

# Log the model using mlflow
with mlflow.start_run():
    model_info = mlflow.transformers.log_model(
        transformers_model=mpt_pipeline,
        artifact_path="mpt-7b",
        signature=signature,
        registered_model_name="mpt-7b-chat",
    )

# COMMAND ----------

# MAGIC %md
# MAGIC ### Load Evaluation Data
# MAGIC
# MAGIC Load in a dataset from Hugging Face Hub to use for evaluation.
# MAGIC
# MAGIC The data fields in the dataset below represent:
# MAGIC
# MAGIC - **instruction**: Describes the task that the model should perform. Each row within the dataset is a unique instruction (task) to be performed.
# MAGIC - **input**: Optional contextual information that relates to the task defined in the `instruction` field. For example, for the instruction "Identify the odd one out", the `input` contextual guidance is given as the list of items to select an outlier from, "Twitter, Instagram, Telegram". 
# MAGIC - **output**: The answer to the instruction (with the optional `input` context provided) as generated by the original evaluation model (`text-davinci-003` from OpenAI)
# MAGIC - **text**: The final total text as a result of applying the `instruction`, `input`, and `output` to the prompt template used, which is sent to the model for fine tuning purposes.

# COMMAND ----------

dataset = load_dataset("tatsu-lab/alpaca")
eval_df = pd.DataFrame(dataset["train"])
eval_df.head(10)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Define Metrics
# MAGIC
# MAGIC Since we are evaluating how well our model can provide an answer to a given instruction, we may want to choose some metrics to help measure this on top of any builtin metrics that `mlflow.evaluate()` gives us.
# MAGIC
# MAGIC Let's measure how well our model is doing on the following two metrics:
# MAGIC
# MAGIC - **Is the answer correct?** Let's use the predefined metric `answer_correctness` here.
# MAGIC - **Is the answer fluent, clear, and concise?** We will define a custom metric `answer_quality` to measure this.
# MAGIC
# MAGIC We will need to pass both of these into the `extra_metrics` argument for `mlflow.evaluate()` in order to assess the quality of our model.
# MAGIC
# MAGIC #### What is an Evaluation Metric?
# MAGIC
# MAGIC An evaluation metric encapsulates any quantitative or qualitative measure you want to calculate for your model. For each model type, `mlflow.evaluate()` will automatically calculate some set of builtin metrics. Refer [here](https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate) for which builtin metrics will be calculated for each model type. You can also pass in any other metrics you want to calculate as extra metrics. MLflow provides a set of predefined metrics that you can find [here](https://mlflow.org/docs/latest/python_api/mlflow.metrics.html), or you can define your own custom metrics. In the example here, we will use the combination of predefined metrics `mlflow.metrics.genai.answer_correctness` and a custom metric for the quality evaluation.

# COMMAND ----------

# MAGIC %md
# MAGIC Let's load our predefined metrics - in this case we are using `answer_correctness` with GPT-4.

# COMMAND ----------

answer_correctness_metric = answer_correctness(model="openai:/gpt-4")

# COMMAND ----------

# MAGIC %md
# MAGIC Now we want to create a custom LLM-judged metric named `answer_quality` using `make_genai_metric()`. We need to define a metric definition and grading rubric, as well as some examples for the LLM judge to use.

# COMMAND ----------

# The definition explains what "answer quality" entails
answer_quality_definition = """Please evaluate answer quality for the provided output on the following criteria:
fluency, clarity, and conciseness. Each of the criteria is defined as follows:
  - Fluency measures how naturally and smooth the output reads.
  - Clarity measures how understandable the output is.
  - Conciseness measures the brevity and efficiency of the output without compromising meaning.
The more fluent, clear, and concise a text, the higher the score it deserves.
"""

# The grading prompt explains what each possible score means
answer_quality_grading_prompt = """Answer quality: Below are the details for different scores:
  - Score 1: The output is entirely incomprehensible and cannot be read.
  - Score 2: The output conveys some meaning, but needs lots of improvement in to improve fluency, clarity, and conciseness.
  - Score 3: The output is understandable but still needs improvement.
  - Score 4: The output performs well on two of fluency, clarity, and conciseness, but could be improved on one of these criteria.
  - Score 5: The output reads smoothly, is easy to understand, and clear. There is no clear way to improve the output on these criteria.
"""

# We provide an example of a "bad" output
example1 = EvaluationExample(
    input="What is MLflow?",
    output="MLflow is an open-source platform. For managing machine learning workflows, it "
    "including experiment tracking model packaging versioning and deployment as well as a platform "
    "simplifying for on the ML lifecycle.",
    score=2,
    justification="The output is difficult to understand and demonstrates extremely low clarity. "
    "However, it still conveys some meaning so this output deserves a score of 2.",
)

# We also provide an example of a "good" output
example2 = EvaluationExample(
    input="What is MLflow?",
    output="MLflow is an open-source platform for managing machine learning workflows, including "
    "experiment tracking, model packaging, versioning, and deployment.",
    score=5,
    justification="The output is easily understandable, clear, and concise. It deserves a score of 5.",
)

answer_quality_metric = make_genai_metric(
    name="answer_quality",
    definition=answer_quality_definition,
    grading_prompt=answer_quality_grading_prompt,
    version="v1",
    examples=[example1, example2],
    model="openai:/gpt-4",
    greater_is_better=True,
)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Evaluate

# COMMAND ----------

# MAGIC %md
# MAGIC We need to set our OpenAI API key, since we are using GPT-4 for our LLM-judged metrics.
# MAGIC
# MAGIC In order to set your private key safely, please be sure to either export your key through a command-line terminal for your current instance, or, for a permanent addition to all user-based sessions, configure your favored environment management configuration file (i.e., .bashrc, .zshrc) to have the following entry:
# MAGIC
# MAGIC `OPENAI_API_KEY=<your openai API key>`

# COMMAND ----------

# MAGIC %md
# MAGIC Now, we can call `mlflow.evaluate()`. Just to test it out, let's use the first 10 rows of the data. Using the `"text"` model type, toxicity and readability metrics are calculated as builtin metrics. We also pass in the two metrics we defined above into the `extra_metrics` parameter to be evaluated.

# COMMAND ----------

with mlflow.start_run():
    results = mlflow.evaluate(
        model_info.model_uri,
        eval_df.head(10),
        evaluators="default",
        model_type="text",
        targets="output",
        extra_metrics=[answer_correctness_metric, answer_quality_metric],
        evaluator_config={"col_mapping": {"inputs": "instruction"}},
    )

# COMMAND ----------

# MAGIC %md
# MAGIC ### View results

# COMMAND ----------

# MAGIC %md
# MAGIC `results.metrics` is a dictionary with the aggregate values for all the metrics calculated. Refer [here](https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate) for details on the builtin metrics for each model type.

# COMMAND ----------

results.metrics

# COMMAND ----------

# MAGIC %md
# MAGIC We can also view the `eval_results_table`, which shows us the metrics for each row of data.

# COMMAND ----------

results.tables["eval_results_table"]

# COMMAND ----------

# MAGIC %md
# MAGIC #### View results in UI

# COMMAND ----------

# MAGIC %md
# MAGIC Finally, we can view our evaluation results in the MLflow UI. We can select our experiment on the left sidebar, which will bring us to the following page. We can see that one run logged our model "mpt-7b-chat", and the other run has the dataset we evaluated.

# COMMAND ----------

# MAGIC %md
# MAGIC ![Evaluation Main](https://i.imgur.com/alymcBq.png)

# COMMAND ----------

# MAGIC %md
# MAGIC We click on the Evaluation tab and hide any irrelevant runs.

# COMMAND ----------

# MAGIC %md
# MAGIC ![Evaluation Filtering](https://i.imgur.com/sr7R9TL.png)

# COMMAND ----------

# MAGIC %md
# MAGIC We can now choose what columns we want to group by, as well as which column we want to compare. In the following example, we are looking at the score for answer correctness for each input-output pair, but we could choose any other metric to compare.

# COMMAND ----------

# MAGIC %md
# MAGIC ![Evaluation Selection](https://i.imgur.com/AeoYMEt.png)

# COMMAND ----------

# MAGIC %md
# MAGIC Finally, we get to the following view, where we can see the justification and score for answer correctness for each row.

# COMMAND ----------

# MAGIC %md
# MAGIC ![Evaluation Comparison](https://i.imgur.com/axsHZxP.png)
